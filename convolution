`timescale 1ns / 1ps

module sobel(

input clk,
input [71:0] data_pixel, //9 pixels (24 bits x 3) are given totally every cycle (for the 3x3 kernel table)
input data_pixel_control,
output reg [7:0] data_converted, //8-bit Out, represent the volume of the edge
output reg data_converted_control
    );
    
integer i;
reg [7:0] kernel1 [8:0]; //9 addresses of 8-bit/each
reg [7:0] kernel2 [8:0];

reg [10:0] multiply1 [8:0]; //product, max 9 bits plus one for the sign 10 so 11 bits is for safety issues
reg [10:0] multiply2 [8:0];

reg [10:0] sumtemp1; //Temporary sum
reg [10:0] sumtemp2;

reg [10:0] sum1; //Final sum
reg [10:0] sum2;

reg multiply_control;
reg sum_control;
//reg conv_control;

reg [20:0] conv_squared_data1;
reg [20:0] conv_squared_data2;

wire [21:0] conv_squared_data;

reg conv_squared_data_control;

initial // create Kernels Table (Sobel operator)
begin
 kernel1[0] = 1;
 kernel1[1] = 0;
 kernel1[2] = -1;
 kernel1[3] = 2;
 kernel1[4] = 0;
 kernel1[5] = -2;
 kernel1[6] = 1;
 kernel1[7] = 0;
 kernel1[8] = -1;
 
 kernel2[0] = 1;
 kernel2[1] = 2;
 kernel2[2] = 1;
 kernel2[3] = 0;
 kernel2[4] = 0;
 kernel2[5] = 0;
 kernel2[6] = -1;
 kernel2[7] = -2;
 kernel2[8] = -1;
end

always @(posedge clk)
begin
 for(i=0;i<9;i=i+1)
 begin
  multiply1[i] <= $signed(kernel1[i])*$signed({1'b0,data_pixel[i*8+:8]}); //add 1 bit extra so that is 9-bit just like the sÎ¹gned kernel
  multiply2[i] <= $signed(kernel2[i])*$signed({1'b0,data_pixel[i*8+:8]});
 end
 multiply_control <= data_pixel_control;
end

always @(*)
begin
 sumtemp1 = 0;
 sumtemp2 = 0;
 for(i=0;i<9;i=i+1)
 begin
  sumtemp1 = $signed(sumtemp1)+$signed(multiply1[i]); 
  sumtemp2 = $signed(sumtemp2)+$signed(multiply2[i]);
 end
end

always @(posedge clk)
begin
 sum1 <= sumtemp1;
 sum2 <= sumtemp2;
 sum_control <= multiply_control;
end

always @(posedge clk)
begin
 conv_squared_data1 <= $signed(sum1)*$signed(sum1);
 conv_squared_data2 <= $signed(sum2)*$signed(sum2);
 conv_squared_data_control <= sum_control;
end 

assign conv_squared_data = conv_squared_data1 + conv_squared_data2;

always @(posedge clk)
begin
 if(conv_squared_data > 63)
  data_converted <= 8'hff; //the outcome will be white
 else
  data_converted <= 8'h00;
 data_converted_control <= conv_squared_data_control; 
end

endmodule
